import { RenderTexture, Renderer } from "@pixi/core";
import { DisplayObject, IDestroyOptions } from "@pixi/display";
import { Sprite } from "@pixi/sprite";
export interface PostProcessingSpriteOptions {
    /**
     * The width of the texture for the sprite.
     */
    width?: number;
    /**
     * The height of the texture for the sprite.
     */
    height?: number;
    /**
     * The object to render. When set, it will automatically be rendered to the
     * sprite's texture each frame.
     */
    objectToRender?: DisplayObject;
    /**
     * The resolution of the texture for the sprite.
     */
    resolution?: number;
}
/**
 * Represents a sprite which can have post processing effects. Can be used for
 * rendering 3D objects as 2D sprites.
 */
export declare class PostProcessingSprite extends Sprite {
    renderer: Renderer;
    private _tickerRender;
    private _renderTexture;
    /** The render texture. */
    get renderTexture(): RenderTexture;
    /** The depth texture. */
    get depthTexture(): import("@pixi/core").BaseTexture<import("@pixi/core").Resource, import("@pixi/core").IAutoDetectOptions> | undefined;
    /**
     * Creates a new post processing sprite using the specified options.
     * @param renderer The renderer to use.
     * @param options The options for the render texture. If both width and height
     * has not been set, it will automatically be resized to the renderer size.
     */
    constructor(renderer: Renderer, options?: PostProcessingSpriteOptions);
    /**
     * Sets the resolution of the render texture.
     * @param resolution The resolution to set.
     */
    setResolution(resolution: number): void;
    destroy(options?: boolean | IDestroyOptions): void;
    /**
     * Updates the sprite's texture by rendering the specified object to it.
     * @param object The object to render.
     */
    renderObject(object: DisplayObject): void;
}
