import { Transform } from "@pixi/math";
import { Matrix4 } from "./matrix4";
import { ObservablePoint3D } from "./observable-point";
import { ObservableQuaternion } from "./observable-quaternion";
/**
 * Handles position, scaling and rotation in 3D.
 */
export declare class Transform3D extends Transform {
    /** The position in local space. */
    position: ObservablePoint3D;
    /** The scale in local space. */
    scale: ObservablePoint3D;
    /** The rotation in local space. */
    rotationQuaternion: ObservableQuaternion;
    /** The transformation matrix in world space. */
    worldTransform: Matrix4;
    /** The transformation matrix in local space. */
    localTransform: Matrix4;
    /** The inverse transformation matrix in world space. */
    inverseWorldTransform: Matrix4;
    /** The normal transformation matrix. */
    normalTransform: Matrix4;
    /**
     * Updates the local transformation matrix.
     */
    updateLocalTransform(): void;
    /**
     * Sets position, rotation and scale from a matrix array.
     * @param matrix The matrix to set.
     */
    setFromMatrix(matrix: Matrix4): void;
    /**
     * Updates the world transformation matrix.
     * @param parentTransform The parent transform.
     */
    updateTransform(parentTransform?: Transform): void;
    /**
     * Rotates the transform so the forward vector points at specified point.
     * @param point The point to look at.
     * @param up The upward direction.
     */
    lookAt(point: ObservablePoint3D, up?: Float32Array): void;
}
