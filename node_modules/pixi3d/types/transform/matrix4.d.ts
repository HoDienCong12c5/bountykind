import { Matrix } from "@pixi/math";
import { ObservablePoint3D } from "./observable-point";
import { ObservableQuaternion } from "./observable-quaternion";
import { TransformId } from "./transform-id";
/**
 * Represents a 4x4 matrix.
 */
export declare class Matrix4 extends Matrix implements TransformId {
    private _transformId;
    private _position?;
    private _scaling?;
    private _rotation?;
    private _up?;
    private _down?;
    private _forward?;
    private _left?;
    private _right?;
    private _backward?;
    get transformId(): number;
    /** The array containing the matrix data. */
    array: Float32Array;
    /**
     * Creates a new transform matrix using the specified matrix array.
     * @param array The matrix array, expected length is 16. If empty, an identity
     * matrix is used by default.
     */
    constructor(array?: ArrayLike<number>);
    toArray(transpose: boolean, out?: Float32Array): Float32Array;
    /** Returns the position component of the matrix. */
    get position(): Float32Array;
    /** Returns the scaling component of the matrix. */
    get scaling(): Float32Array;
    /** Returns the rotation quaternion of the matrix. */
    get rotation(): Float32Array;
    /** Returns the up vector of the matrix. */
    get up(): Float32Array;
    /** Returns the down vector of the matrix. */
    get down(): Float32Array;
    /** Returns the left vector of the matrix. */
    get right(): Float32Array;
    /** Returns the right vector of the matrix. */
    get left(): Float32Array;
    /** Returns the forward vector of the matrix. */
    get forward(): Float32Array;
    /** Returns the backward vector of the matrix. */
    get backward(): Float32Array;
    copyFrom(matrix: Matrix4): this;
    /**
     * Sets the rotation, position and scale components.
     * @param rotation The rotation to set.
     * @param position The position to set.
     * @param scaling The scale to set.
     */
    setFromRotationPositionScale(rotation: ObservableQuaternion, position: ObservablePoint3D, scaling: ObservablePoint3D): void;
    /**
     * Multiplies this matrix with another matrix.
     * @param matrix The matrix to multiply with.
     */
    multiply(matrix: Matrix4): void;
}
