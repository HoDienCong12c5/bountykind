import { ObservablePoint, IPoint } from "@pixi/math";
/**
 * Represents a point in 3D space.
 */
export declare class ObservablePoint3D extends ObservablePoint {
    private _array;
    /** Array containing the x, y, z values. */
    get array(): Float32Array;
    set array(value: Float32Array);
    /**
     * Creates a new observable point.
     * @param cb The callback when changed.
     * @param scope The owner of callback.
     * @param x The position on the x axis.
     * @param y The position on the y axis.
     * @param z The position on the z axis.
     */
    constructor(cb: () => void, scope: any, x?: number, y?: number, z?: number);
    /**
     * Position on the x axis relative to the local coordinates of the parent.
     */
    get x(): number;
    set x(value: number);
    /**
     * Position on the y axis relative to the local coordinates of the parent.
     */
    get y(): number;
    set y(value: number);
    /**
     * Position on the z axis relative to the local coordinates of the parent.
     */
    get z(): number;
    set z(value: number);
    clone(cb?: (this: any) => any, scope?: any): ObservablePoint3D;
    copyFrom(p: ObservablePoint3D): this;
    copyTo<T extends IPoint>(p: T): T;
    equals(p: ObservablePoint3D): boolean;
    /**
     * Sets the point to a new x, y and z position.
     * @param x The position on the x axis.
     * @param y The position on the y axis.
     * @param z The position on the z axis.
     */
    set(x: number, y?: number, z?: number): this;
    /**
     * Sets the point to a new x, y and z position.
     * @param array The array containing x, y and z, expected length is 3.
     */
    setFrom(array: ArrayLike<number>): this;
}
