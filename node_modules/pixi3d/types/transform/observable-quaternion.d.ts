import { ObservablePoint, IPoint } from "@pixi/math";
/**
 * Represents a rotation quaternion in 3D space.
 */
export declare class ObservableQuaternion extends ObservablePoint {
    private _array;
    /** Array containing the x, y, z, w values. */
    get array(): Float32Array;
    set array(value: Float32Array);
    /**
     * Creates a new observable quaternion.
     * @param cb The callback when changed.
     * @param scope The owner of callback.
     * @param x The x component.
     * @param y The y component.
     * @param z The z component.
     * @param w The w component.
     */
    constructor(cb: () => void, scope: any, x?: number, y?: number, z?: number, w?: number);
    /** The x component of the quaternion. */
    get x(): number;
    set x(value: number);
    /** The y component of the quaternion. */
    get y(): number;
    set y(value: number);
    /** The z component of the quaternion. */
    get z(): number;
    set z(value: number);
    /** The w component of the quaternion. */
    get w(): number;
    set w(value: number);
    /**
     * Sets the euler angles in degrees.
     * @param x The x angle.
     * @param y The y angle.
     * @param z The z angle.
     */
    setEulerAngles(x: number, y: number, z: number): void;
    /**
     * Creates a clone of this quaternion.
     * @param cb Callback when changed.
     * @param scope Owner of callback.
     */
    clone(cb?: (this: any) => any, scope?: any): ObservableQuaternion;
    /**
     * Copies x, y, z, and w from the given quaternion.
     * @param p The quaternion to copy from.
     */
    copyFrom(p: ObservableQuaternion): this;
    /**
     * Copies x, y, z and w into the given quaternion.
     * @param p The quaternion to copy to.
     */
    copyTo<T extends IPoint>(p: T): T;
    /**
     * Returns true if the given quaternion is equal to this quaternion.
     * @param p The quaternion to check.
     */
    equals(p: ObservableQuaternion): boolean;
    /**
     * Sets the quaternion to new x, y, z and w components.
     * @param x X component to set.
     * @param y Y component to set.
     * @param z Z component to set.
     * @param w W component to set.
     */
    set(x: number, y?: number, z?: number, w?: number): this;
    /**
     * Sets the quaternion to a new x, y, z and w components.
     * @param array The array containing x, y, z and w, expected length is 4.
     */
    setFrom(array: ArrayLike<number>): this;
}
